# run with: 
#     gh workflow run simple-gcp --ref "$(git rev-parse --abbrev-ref HEAD)" -f action=apply

name: simple-gcp

env:
  SLEEVE: simple-gcp
  S3_STORAGE_BUCKET: ${{ secrets.S3_STORAGE_BUCKET }}
  S3_BUCKET_REGION: ${{ secrets.S3_BUCKET_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AC_GITHUB_ACCESS_TOKEN: ${{ secrets.AC_GITHUB_ACCESS_TOKEN }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  SSH_PRIVATE_KEY_BASE64: ${{ secrets.SSH_PRIVATE_KEY_BASE64 }}
  GCP_PROJECT_NAME: ${{ secrets.GCP_PROJECT_NAME }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}
  GOOGLE_APPLICATION_CREDENTIALS_BASE64: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}

on: 
  workflow_dispatch:
    inputs:
      stack_name:
        description: 'name for stack created or destroyed'
        default: ''
        required: true
      action:
        description: 'apply or destroy stack'
        required: true
        # no default, require user input
        type: choice
        default: apply
        options:
        - apply
        - destroy
      env_name:
        description: 'env choice. ex: prod.default, stage.default'
        default: 'default.prod'
        required: true

jobs:
  ## fix this later to use stack_records as a workflow_call ##
  # stack_records:
  #   uses: .github/workflows/stack_records.yml
  #   with:
  #     stack_name: ${{ github.event.inputs.stack_name }}
  #     action: ${{ github.event.inputs.action }}
  #     env_name: ${{ github.event.inputs.env_name }}
  #     sleeve: ${{ env.SLEEVE }}
  ## fix this later to use stack_records as a workflow_call ##

  stack_records:
    runs-on: ubuntu-latest
    container:
      image: gcr.io/solutions-team-280017/swiss-alpine:latest
    steps:
      - uses: actions/checkout@v2
      - name: stack_records
        run: |
          ./sleeves/common/stack-records-hub
        env:
          STACK_NAME: ${{ github.event.inputs.stack_name }}
          ACTION: ${{ github.event.inputs.action }}
          ENV_NAME: ${{ github.event.inputs.env_name }}
          S3_STORAGE_PATH: "${{ github.event.inputs.env_name }}/${{ env.SLEEVE }}/${{ github.event.inputs.stack_name }}"

  simple-gcp-apply:
    if: ${{ github.event.inputs.action == 'apply' }}
    needs: stack_records
    runs-on: ubuntu-latest
    container:
      image: gcr.io/solutions-team-280017/swiss-alpine:latest
    steps:
      - uses: actions/checkout@v2
      - name: simple-gcp-apply
        run: |
          ./sleeves/simple-gcp/create-gcp-vars
          cd ./templates/simple-gcp
          terraform init -backend-config=s3_backend
          terraform providers
          terraform apply -var-file=demo.tfvars.json -auto-approve
        env:
          STACK_NAME: ${{ github.event.inputs.stack_name }}
          ACTION: ${{ github.event.inputs.action }}
          ENV_NAME: ${{ github.event.inputs.env_name }}
          S3_STORAGE_PATH: "${{ github.event.inputs.env_name }}/${{ env.SLEEVE }}/${{ github.event.inputs.stack_name }}"

  simple-gcp-check-site:
    runs-on: ubuntu-latest
    needs: simple-gcp-apply
    container:
      image: gcr.io/solutions-team-280017/swiss-alpine:latest
    steps:
      - uses: actions/checkout@v2
      - name: simple-gcp-check-site
        run: |
          aws s3 cp s3://${S3_STORAGE_BUCKET}/${S3_STORAGE_PATH}/${SLEEVE}/terraform.tfstate ./terraform.tfstate
          ./sleeves/common/ansible-ping $(jq -r .outputs.public_addresses.value ./terraform.tfstate)
        env:
          STACK_NAME: ${{ github.event.inputs.stack_name }}
          ACTION: ${{ github.event.inputs.action }}
          ENV_NAME: ${{ github.event.inputs.env_name }}
          S3_STORAGE_PATH: "${{ github.event.inputs.env_name }}/${{ env.SLEEVE }}/${{ github.event.inputs.stack_name }}"

  simple-gcp-destroy:
    if: ${{ github.event.inputs.action == 'destroy' }}
    needs: stack_records
    runs-on: ubuntu-latest
    container:
      image: gcr.io/solutions-team-280017/swiss-alpine:latest
    steps:
      - uses: actions/checkout@v2
      - name: simple-gcp-destroy
        run: |
          ./sleeves/simple-gcp/create-gcp-vars
          cd ./templates/simple-gcp
          terraform init -backend-config=s3_backend
          terraform providers
          terraform destroy -var-file=demo.tfvars.json -auto-approve
        env:
          STACK_NAME: ${{ github.event.inputs.stack_name }}
          ACTION: ${{ github.event.inputs.action }}
          ENV_NAME: ${{ github.event.inputs.env_name }}
          S3_STORAGE_PATH: "${{ github.event.inputs.env_name }}/${{ env.SLEEVE }}/${{ github.event.inputs.stack_name }}"

